/* 
    App.js is the main component in this system. It is controlling which component should render base on if the user
  is logging in, practicing passwords, testing passwords. If the users haven't enter user name, it will render the
  Login component. If the user proceed to the passwords practice session, the Practice component will be rendered.
  If the user proceed to the password testing session, the Test component will be rendered. If the user finish testing,
  the EndScreen component will be rendered, to display the messages and guide users to our survey.
    The chooseUniquePassword() function is used to make sure the password that generated by the system only contains
  unique element.
    The generatePassword() function is used to randomly generate passwords for the users.
    The switchPassword() function allows users to switch different set of passwords.
    The handleGenerateNew() function is used to generate new set of function, allowing user to receive new passwords if
  they think the given password is too hard.
    The handleGoToTest() function is triggered when the user decide to go to the password testing session.
    The testOver() function is used to record the time that user spend and push it to the database.
    The handleLogin() function is called when the user press the "START" function in the Login component.
  
*/
import React, { Component } from 'react'
import './App.css'
import { DragDropContext } from 'react-dnd'
import HTML5Backend from 'react-dnd-html5-backend'
import Login from './components/Login'
import data from './components/Data'
import Practice from './components/Practice'
import Test from './components/Test'
import EndScreen from './components/EndScreen'
import { firestore } from './index'

class App extends Component {
  constructor (props) {
    super(props)

    this.chooseUniquePassword = this.chooseUniquePassword.bind(this)
    this.generatePassword = this.generatePassword.bind(this)
    this.switchPassword = this.switchPassword.bind(this)
    this.handleGenerateNew = this.handleGenerateNew.bind(this)
    this.handleGoToTest = this.handleGoToTest.bind(this)
    this.testOver = this.testOver.bind(this)
    this.handleLogin = this.handleLogin.bind(this)

    const emailPassword = this.generatePassword(4)
    const bankPassword = this.generatePassword(4)
    const shoppingPassword = this.generatePassword(4)
    const login = false
    const username = ''

    this.state = {
      login,
      username,
      index: 0,
      testFinished: false,
      practice: true,
      passwordArray: [
        {pw: emailPassword, type: 'email'},
        {pw: bankPassword, type: 'banking'},
        {pw: shoppingPassword, type: 'shopping'}
      ]
    }
  }

  chooseUniquePassword (elm, array, length) {
    while (array.includes(elm) || !elm) {
      elm = data[Math.floor(Math.random() * data.length)]
    }
    return elm
  }

  shuffleArray (arr) {
    return (
      arr
        .slice()
        .map(a => [Math.random(), a])
        .sort((a, b) => a[0] - b[0])
        .map(a => a[1])
    )
  }

  generatePassword (length) {
    const random = []
    let randomIcon
    for (let i = 0; i < length; i++) {
      random.push(this.chooseUniquePassword(randomIcon, random, length))
    }
    return random
  }

  switchPassword (type) {
    const {passwordArray} = this.state
    const index = passwordArray.findIndex((item) => {
      return item.type === type
    })

    this.setState({index})
  }

  handleGenerateNew (type) {
    const {passwordArray} = this.state
    const index = passwordArray.findIndex((item) => {
      return item.type === type
    })

    this.setState({
      passwordArray: [
        ...passwordArray.slice(0, index),
        {pw: this.generatePassword(4), type},
        ...passwordArray.slice(index + 1, passwordArray.length)
      ]
    })
  }

  handleGoToTest (timeSpent) {
    const {username, passwordArray} = this.state
    firestore.collection(username).doc('practice').set({timeSpent})
    firestore.collection(username).doc('test').set({timeSpent: 0})
    this.setState({
      index: 0,
      practice: false,
      passwordArray: this.shuffleArray(passwordArray)
    })
  }

  testOver (timeSpent) {
    const {username} = this.state
    this.setState({testFinished: true})
    firestore.collection(username).doc('test').update({timeSpent})
  }

  handleLogin (username) {
    this.setState({
      username,
      login: true
    })
  }

  render () {
    const {index, passwordArray, login, practice, testFinished, username} = this.state
    const {type, pw} = passwordArray[index]
    if (login) {
      if (practice) {
        return (
          <Practice
            pw={pw}
            type={type}
            user={username}
            switchPassword={this.switchPassword}
            generateNew={this.handleGenerateNew}
            goToTestFunc={this.handleGoToTest}
          />
        )
      } else {
        if (testFinished) {
          return <EndScreen />
        } else {
          return (
            <Test
              pw={pw}
              type={type}
              user={username}
              isLastPW={index === 2}
              nextButtonFunc={() => this.setState({index: index + 1})}
              testOver={this.testOver}
            />
          )
        }
      }
    } else {
      return <Login handleLogin={this.handleLogin} />
    }
  }
}

export default DragDropContext(HTML5Backend)(App)
